Ana-Maria Radu, 324CA
April 2020

(1) bani.cpp
For the first case, I came up with a linear solution, described below:
- consider n=1; here, for one position, we can place any of the 5 bancnotes.
- consider n greater than 1; in this case, we can visualise the placement like this:
|____|____|____|....|____|
 (1)  (2)  (3)        (n)
 For position (1), we have 5 possibilities of picking a bancnote. For position (2),
 regardless of what we placed on (1), we only have 2 options of picking other bancnotes,
 because the rules say so. For position (3), regardless of what we pick on (2), we can
 only have other 2 options, and so on. In the end, the solution becomes:
 5 x 2^(n-1).
 To deal with large numbers I declared unsigned long long as uint64 and used it when
 computing the powers of 2.
 To my mind, this is O(1).

 For the second case, I tried finding another linear solution and at first I thought
 that was:
 4 x 2^(n-1) + 3^(n-2)
 But it didn't work for all cases. So I settled for a recursive solution that computes
 how many possibilities there are for each bancnote for each step, based on the previous
 step.
 For instance, 10 can only be placed after 50, 100 or 500, so counting how many of those
 there are for the previous step can tell us how many 10s we have for this step. Doing so
 fo all bancnotes means that in the end, the total number of bancnotes* for the last step
 is the actual result.
 * by bancnotes I mean possibilities of arranging them
 This second case should be O(n).

 (2) gard.cpp
 This solution is more straight forward, as similar examples have been discussed during
 the labs. There is a logarithmic time sorting of the intervals, in ascending order by
 their starting point and, in case of wquality, in descending order of their ending
 point. An example would be this:
 |____|
 |___|
 |_|
   |____|
     |_____|
     |___|
     |__|
The very first interval is picked as a comparison point for the following intervals,
until it is no longer useful (that is, until its ending point is surpassed by another
interval's ending point). By comparing each interval with this comparison point and
counting which of them are contained inside it, we have our solution.
Time complexity is O(nlogn).

(3) bomboane.cpp
I tried finding a linear solution by counting how many possibilities of candy numbers
each student has (so the end of interval minus the start of the interval), but this
did not work no matter how I spinned it. In the end, I picked a dynamic approach.
My matrix of solutions has a size of [(m+1), n], where
m = number of candies
n = number of students
It's general layout is this:
        [intv. 1st student]    [intv. 2nd student] ... [invt. nth studet]
______________________________________________________________________________
0   |
1   |
2   |
... |
n   |
The first column is completed as such: from the start to the end of the first
student's interval, we add ones. So if the first student has [0,4], in this
matrix, [0][0], [1][0], [2][0], [3][0] and [4][0] will be 1. The following
columns are computed by taking into account the one directly before and
storing the number of possibilities of receiving the number of cookies
represented by the line we are currently on. For example for line l, we
look at the previous column from line 0 to line l and we see how many
possibilities there were of receiving cookies then, we take into account if
these possibilities are inside the current interval, and we add the new
number of possibilities to the current position. The solution is the last
position in the matrix, because it is the sum of all other possibilities.
